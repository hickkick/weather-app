{"version":3,"sources":["components/Input.module.css","components/Weather.js","components/Input.js","components/SearchForm.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","name","weather","temp","feels_like","wind_speed","wind_degree","country","className","toFixed","map","i","description","main","icon","key","src","alt","Input","props","styles","container","input","type","SearchForm","state","value","submitHandler","e","preventDefault","onSubmit","changeHandler","currentTarget","setState","this","onChange","placeholder","React","Component","API_URL","API_KEY","App","lon","lat","query","data","undefined","fetchWeather","a","async","fetch","response","json","setCurrentWeather","wind","speed","deg","sys","sunrise","sunset","search","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","console","log","latitude","longitude","renderContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50d5ee51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__jzLof\",\"input\":\"Input_input__2uitF\"};","import React from \"react\";\r\nimport \"./Weather.css\";\r\n\r\nexport const Weather = ({\r\n    name,\r\n    weather,\r\n    temp,\r\n    feels_like, \r\n    wind_speed,\r\n    wind_degree,\r\n    country,\r\n}) => {\r\n    const iconUrl = \"https://openweathermap.org/img/wn\";\r\n    return (\r\n        <div className={\"weather__container\"}>\r\n            <h2>\r\n                {name}, {country}\r\n            </h2>\r\n            <h2> {temp.toFixed(0)} C</h2>\r\n            <p>Feels like: {feels_like.toFixed(0)} </p>\r\n            {weather.map(({ description, main, icon}, i) => (\r\n                <p key={i}>\r\n                    <img src={`${iconUrl}/${icon}@2x.png`} alt=\"\" />\r\n                    <br />\r\n                    <b> {main} </b>\r\n                    <br />\r\n                    {description}\r\n                </p>\r\n            ))}\r\n            <p>\r\n                {wind_degree} {wind_speed}\r\n            </p> \r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport const Input = props => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <input className={styles.input} type='text' {...props} />\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Input } from './Input';\r\n\r\nexport class SearchForm extends React.Component {\r\n    state = {\r\n        value: ''\r\n    };\r\n    submitHandler = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit(this.state.value);\r\n    };\r\n\r\n    changeHandler = e => {\r\n        const value = e.currentTarget.value;\r\n        this.setState(state => ({ ...state, value}));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitHandler}>\r\n                <Input\r\n                onChange={this.changeHandler}\r\n                value={this.state.value}\r\n                placeholder={'Search'}\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport {getLocation} from './utils';\nimport {Weather} from './components/Weather';\nimport {SearchForm} from './components/SearchForm'\n\nimport './App.css';\n\nconst API_URL = 'https://api.openweathermap.org/data/2.5';\nconst API_KEY = 'eb3e6291bd4907d98c4d3ca59fa6d58a';\n\n\n\nclass App extends React.Component {\n\n  state = {\n    lon: '',\n    lat: '',\n    query: '',\n    data: undefined\n  };\n\n  async componentDidMount() {\n    const {coords} = await getLocation();\n      console.log(coords);\n      this.setState((state) => ({ ...state, lat: coords.latitude.toFixed(2), lon: coords.longitude.toFixed(2) }));\n      this.fetchWeather();\n  }\n\n  fetchWeather = async () => {\n    const {lat, lon} = this.state;\n    const response = await fetch(`${API_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=ua`);\n    const data = await response.json();\n    this.setCurrentWeather(data)\n  }\n\n  setCurrentWeather = data => {\n    const {\n      main: {temp, feels_like},\n      wind: { speed: wind_speed, deg: wind_degree },\n      sys: { country, sunrise, sunset },\n      name,\n      weather\n    } = data;\n    this.setState(state => {\n      return {\n        ...state,\n        data: {\n        temp,\n        feels_like,\n        wind_speed,\n        wind_degree,\n        country,\n        sunrise,\n        sunset,\n        name,\n        weather\n        }\n      };\n    });\n  };\n\nsearch = async value => {\n  try {\n    const response = await fetch(\n      `${API_URL}/weather?appid=${API_KEY}&q=${value}&units=metric&lang=ua`\n    );\n    const data = await response.json();\n    this.setCurrentWeather(data);\n  } catch (e) {\n    throw e;\n  }\n};\n\n  renderContent() {\n    return this.state.data ? (\n    <> \n    <SearchForm onSubmit={this.search} />\n    <Weather {...this.state.data} />\n    </>\n    ) : (\n     'Loading...'\n    );\n  }\n\n  render() {\n    return <div className=\"app__container\">\n      <div className=\"app__contant\">\n        {this.renderContent()}\n      </div>\n    </div>\n  }\n}\n\nexport default App;\n","export const getLocation = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if (\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          resolve(position);\r\n        });\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n  };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}